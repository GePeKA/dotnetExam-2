// <auto-generated />
using System;
using Main.DataAccess.DatabaseContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Main.DataAccess.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250211093933_AddedMaxAllowedRatingAndIndexes")]
    partial class AddedMaxAllowedRatingAndIndexes
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.GameSession", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatorUsername")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CurrentRound")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("DateTimeCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MaxAllowedRating")
                        .HasColumnType("integer");

                    b.Property<string>("OpponentUsername")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUsername");

                    b.HasIndex("OpponentUsername");

                    b.HasIndex("Status", "DateTimeCreated");

                    b.ToTable("GameSessions");
                });

            modelBuilder.Entity("Domain.Entities.Move", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<short>("CellIndex")
                        .HasColumnType("smallint");

                    b.Property<short>("MoveNumber")
                        .HasColumnType("smallint");

                    b.Property<Guid>("RoundId")
                        .HasColumnType("uuid");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoundId");

                    b.HasIndex("Username");

                    b.ToTable("Moves");
                });

            modelBuilder.Entity("Domain.Entities.Round", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<short>("CurrentMove")
                        .HasColumnType("smallint");

                    b.Property<long>("GameSessionId")
                        .HasColumnType("bigint");

                    b.Property<string>("PlayerOUsername")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PlayerXUsername")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RoundNumber")
                        .HasColumnType("integer");

                    b.Property<string>("WinnerUsername")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GameSessionId");

                    b.HasIndex("PlayerOUsername");

                    b.HasIndex("PlayerXUsername");

                    b.HasIndex("WinnerUsername");

                    b.ToTable("Rounds");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserName");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Entities.GameSession", b =>
                {
                    b.HasOne("Domain.Entities.User", "CreatorUser")
                        .WithMany("CreatedGameSessions")
                        .HasForeignKey("CreatorUsername")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "Opponent")
                        .WithMany("JoinedGameSessions")
                        .HasForeignKey("OpponentUsername")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatorUser");

                    b.Navigation("Opponent");
                });

            modelBuilder.Entity("Domain.Entities.Move", b =>
                {
                    b.HasOne("Domain.Entities.Round", "Round")
                        .WithMany("Moves")
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("Username")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Round");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Round", b =>
                {
                    b.HasOne("Domain.Entities.GameSession", "GameSession")
                        .WithMany("Rounds")
                        .HasForeignKey("GameSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "PlayerO")
                        .WithMany()
                        .HasForeignKey("PlayerOUsername")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "PlayerX")
                        .WithMany()
                        .HasForeignKey("PlayerXUsername")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "Winner")
                        .WithMany()
                        .HasForeignKey("WinnerUsername")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GameSession");

                    b.Navigation("PlayerO");

                    b.Navigation("PlayerX");

                    b.Navigation("Winner");
                });

            modelBuilder.Entity("Domain.Entities.GameSession", b =>
                {
                    b.Navigation("Rounds");
                });

            modelBuilder.Entity("Domain.Entities.Round", b =>
                {
                    b.Navigation("Moves");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("CreatedGameSessions");

                    b.Navigation("JoinedGameSessions");
                });
#pragma warning restore 612, 618
        }
    }
}
